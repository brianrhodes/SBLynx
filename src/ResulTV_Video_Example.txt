; Defaults: 9600,8,N,1
;
; ResulTV Video Display Example Scoreboard Script
;
; Copyright (c) 2021 Lynx System Developers, Inc.
;
; Written by Kirk Sigel
;
; Notes:
;  + Empty lines and lines that start with a semicolon are ignored.
;
;  + Lines that start with two semicolons indicate a section header.
;    Sections may be omitted, appear in any order, and occur more than once.
;    The current section headers and their valid group codes are:
;      ;;Initialization
;        \10 \13 \17 \18
;      ;;TimeArmed
;      ;;TimeRunning
;      ;;TimePaused
;      ;;TimeStopped
;      ;;TimeGun
;      ;;TimeBreak
;      ;;TimeUpdate
;      ;;TimeOfDay
;        \11 \13 \17 \18
;      ;;Wind
;        \12 \13 \17 \18
;      ;;StartListHeader
;      ;;StartListTrailer
;      ;;StartedHeader
;      ;;StartedTrailer
;      ;;ResultsHeader
;      ;;ResultsTrailer
;      ;;Image (if present then ;;ImageResults* will be ignored)
;      ;;ImageResultsHeader
;      ;;ImageResultsTrailer
;        \13 \17 \18
;      ;;StartList
;      ;;Started
;      ;;Results (or ;;Result)
;      ;;ImageResults
;        \13 \14 \17 \18
;      ;;MessageHeader
;      ;;MessageTrailer
;        \13 \15 \17 \18
;      ;;Message
;        \13 \15 \16 \17 \18
;    The StartList*, Started*, and Results* sections may have an optional
;    page number contained in square brackets immediately following the
;    section name. If more than one page is defined for a section then each
;    page will be shown, in order, when paging is enabled. Note that page
;    numbers do not need to be contiguous; they are simply used to establish
;    the order of pages. If a page number is omitted then a 0 (zero) is
;    assumed.
;    Some sections can be omitted and they will "fall back" to other
;    sections. TimeOfDay falls back to TimeRunning. TimeArmed falls back to
;    TimeRunning. TimePaused falls back to TimeStopped. The StartList* sections
;    fall back to the Results* sections. The Started* sections fall back
;    to the StartList* sections (after the StartList* sections have fallen
;    back to the Results* sections if necessary).
;
;  + Format lines must begin with a one byte group code and a one byte
;    variable code. The special variable code \00 indicates that no variable
;    is being requested. If a variable is requested it will be inserted where
;    a '%s' printf style format specifier appears. There can only be one '%s'
;    specifier in lines requesting a variable and no other printf format
;    specifiers may appear. Remember, lines requesting a variable are used as
;    a printf format string and therefore must behave as such. Lines not 
;    requesting a variable (variable code \00) can do whatever they want as
;    these lines are not fed to a printf statement.
;    The current group codes and their variable codes are:
;      \10  Initialize
;         \00  No variable
;      \11  Time
;         \00  No variable
;         \01  Formatted time with tenth (when running) or hundredth (when
;              stopped) precision
;         \02  Binary time in milliseconds (4 byte little endian integer)
;         \03  Formatted time with thousandth precision
;         \04  Formatted time with ten thousandth precision
;         \05  Formatted time with tenth precision
;         \06  Formatted time with hundredth precision
;      \12  Wind
;         \00  No variable
;         \01  Formatted wind
;         \02  Binary wind in hundredths of units (4 byte little endian integer)
;      \13  Results Header/Trailer
;         \00  No variable
;         \01  OFFICIAL/UNOFFICIAL string
;         \02  Event name
;         \03  Wind
;         \04  Event number
;         \05  Round number
;         \06  Heat number
;         \07  AUTO/MANUAL start type
;         \08  Number of participants
;         \09  ARMED/RUNNING status
;         \0a  Distance
;      \14  Result
;         \00  No variable
;         \01  Place
;         \02  Lane
;         \03  Id
;         \04  Name
;         \05  Affiliation
;         \06  Time
;         \07  Delta Time
;         \08  Cumulative Split Time
;         \09  Last Split Time
;         \0a  Laps To Go
;         \0b  License
;         \0c  ReacTime
;         \0d  Speed
;         \0e  Pace
;         \0f  Best Split Time
;         \10  User1
;         \11  User2
;         \12  User3
;         \13  "From Image" Cumulative Split Time
;         \14  "From Image" Window Number
;         \15  Delta Time 2
;         \16  Delta Time 3
;         \17  First Name
;         \18  Last Name
;         \19  Start Time (default behavior)
;         \1a  Start Time (Time Trial key match only)
;      \15  Message Header/Trailer
;         \00  No variable
;      \16  Message
;         \00  No variable
;         \01  Text
;      \17  Break Time
;         \00  No variable
;         \nn  Formatted break time nn
;      \18  Break Name
;         \00  No variable
;         \nn  Break name nn
;
;  + Arbitrary 8 bit values are entered as \hh where h is a lowercase hex
;    digit. Note that h must be lowercase.
;
;  + Format lines can have the following commands embedded in them.
;    Note that only 10 registers (indexed 0-9) are currently implemented.
;     \U\hh   Set the 'U' value to hh. It is reset after the next command.
;     \Ui\hh  Set the 'U' value to register[hh].
;     \X\hh   Set the 'X' value to hh. It is reset after the next command.
;     \Xi\hh  Set the 'X' value to register[hh].
;     \=\hh   register[hh] = {register[U]|X|1}                 (assign)
;     \*\hh   register[hh] = register[hh] * {register[U]|X|1}  (multiply)
;     \/\hh   register[hh] = register[hh] / {register[U]|X|1}  (divide)
;     \#\hh   register[hh] = register[hh] # {register[U]|X|1}  (modulus)
;     \+\hh   register[hh] = register[hh] + {register[U]|X|1}  (add)
;     \-\hh   register[hh] = register[hh] - {register[U]|X|1}  (subtract)
;     \<\hh   register[hh] = register[hh] << {register[U]|X|1} (shift left)
;     \>\hh   register[hh] = register[hh] >> {register[U]|X|1} (shift right)
;     \&\hh   register[hh] = register[hh] & {register[U]|X|1}  (bit and)
;     \|\hh   register[hh] = register[hh] | {register[U]|X|1}  (bit or)
;     \^\hh   register[hh] = register[hh] ^ {register[U]|X|1}  (bit xor)
;     \~\hh   register[hh] = ~register[hh]                     (bit invert)
;     \!\hh   register[hh] = !register[hh]                     (logical invert)
;     \F\hh   register[hh] = The result of running Function {U|0} on the 
;             next {X|<eol>} characters.
;              \U\00  IDS checksum.
;              \U\01  XOR checksum. register[hh] is used as the seed value.
;              \U\02  ADD checksum. register[hh] is used as the seed value.
;              \U\03  CRC-16. register[hh] is used as the seed value
;                       and register[hh+1] is the polynomial.
;              \U\04  CRC-32. register[hh] is used as the seed value
;                       and register[hh+1] is the polynomial.
;     \O\hh   Output register[hh] as an {X|1} byte value using method {U|0}.
;              \U\00  Binary little-endian (Intel byte order).
;              \U\01  Binary big-endian (Motorola byte order).
;              \U\02  ASCII text right justified space padded.
;              \U\03  ASCII text right justified zero padded.
;              \U\04  ASCII text left justified space padded.
;              \U\05  ASCII text left justified zero padded.
;     \S\hh   Scan the next {X|1} bytes into register[hh] using method {U|0}.
;              \U\00  ASCII text base 10.
;              \U\01  Binary little-endian (Intel byte order).
;              \U\02  Binary big-endian (Motorola byte order).
;     \P\hh   Run Procedure hh on the next {X|<eol>} characters.
;              \P\00  Reverse characters.
;              \P\01  Convert characters to Colorado Time format. Register[1]
;                       is the current character position on entry and the
;                       next character position on exit.
;              \P\02  Convert characters to Daktronics AllSport format.
;     \B\hh   Delete {register[U]|hh} (to beginning of line if zero) characters 
;             before the cursor or until the string contains X characters.
;     \D\hh   Delete {register[U]|hh} (to end of line if zero) characters 
;             at the cursor or until the string contains X characters.
;     \I\hh   Insert {register[U]|hh} spaces at the cursor or until the string
;             contains X characters.
;     \Ic\hh  Insert {register[U]|hh} {X's|spaces} at the cursor.
;     \L\hh   Move the cursor {register[U]|hh} positions to the left (to the 
;             beginning of the line if zero).
;     \R\hh   Move the cursor {register[U]|hh} positions to the right (to the
;             end of the line if zero).
;     \He\hh  Halt if register[hh] == {register[U]|X|0}.
;     \Hn\hh  Halt if register[hh] != {register[U]|X|0}.
;     \Hl\hh  Halt if register[hh] <  {register[U]|X|0}.
;     \Hm\hh  Halt if register[hh] <= {register[U]|X|0}.
;     \Hg\hh  Halt if register[hh] >  {register[U]|X|0}.
;     \Hh\hh  Halt if register[hh] >= {register[U]|X|0}.
;    Note that numbers 0 thru 9 can be entered directly for single character
;    embedded commands. For example, '\U\04' is the same as '\U4' and 
;    '\=\01' is the same as '\=1'.
;
;  + Be very careful about whitespace in each format line. Characters other
;    than '%s' specifiers and embedded commands and values will be sent
;    exactly as they appear on the line. This means, for instance, that using
;    tabs to make a line 'look right' in your favorite editor will cause
;    tabs to be sent to the scoreboard instead of the equivalent number of
;    spaces (probably not what you wanted).
;
;
; ***************************************************************************
; ***************************************************************************
; ***************************************************************************
;
; ResulTV Video Display Notes:
;
;  + Video commands must begin with 12h (\12) and end with 14h (\14).
;
;  + Extraneous whitespace within commands is not permitted.
;    For example: "LayoutSetup=16,4", not "LayoutSetup = 16, 4".
;
;  + Available Video commands are:
;     LayoutSetup - Resets the drawing environment and defines layout size.
;       LayoutSetup=<width>,<height>
;       <width> = Layout width (number of cells).
;       <height> = Layout height (number of cells).
;     LayoutBackColor - Sets the layout background color.
;       LayoutBackColor=<color>
;       <color> = White, LightGray, DarkGray, Black, Red, Green, Blue,
;                 Cyan, Magenta, Yellow, Background, or <custom>
;       <custom> = <red value>,<green value>,<blue value>
;       <value> = Hex or decimal value between 0 and 255. Hex values
;                 are prefaced with "0x".
;     LayoutFlush - Sends the current layout to the video port.
;       LayoutFlush
;     TextSetup - Starts a text operation and defines the field size.
;       TextSetup=<width>[,<height>[,<left>,<top>]]
;       <width> = Field width (number of cells).
;       <height> = Field height (number of cells). Default is 1.
;       <left> = Field left coordinate. Default is current position.
;       <top> = Field top coordinate. Default is current position.
;     TextDraw - Ends a text operation and defines the string to draw.
;       TextDraw=<string>
;       <string> = Any printable characters, max length 255.
;     TextJustify - Sets the text justification.
;       TextJustify=<justify>
;       <justify> = Left, Center, or Right
;     TextMargins - Sets the margins within a text field.
;       TextMargins=<left>,<right>
;       <left> = Left margin (number of pixels).
;       <right> = Right margin (number of pixels).
;     TextHandling - Sets how text is rendered in a TextDraw operation.
;       TextHandling=<method>
;       <method> = Character, String, or Auto
;       Character renders each character separately.
;       String renders the entire string in one operation.
;       Auto uses String if the string contains any character values
;       above 255. Otherwise, it uses Character.
;     TextOptimize - Controls text rendering optimization.
;       TextOptimize=<mode>
;       <mode> = On or Off
;     FontName - Sets the name of the font to use.
;       FontName=<font>
;       <font> = Font name. Note that font names are case sensitive.
;     FontWidth - Sets the font width and "shrink to fit" value.
;       FontWidth=<width>[,<stf>]
;       <width> = Font width as a percentage of "standard" width.
;       <stf> = Font "shrink to fit" value as a percentage of <width>.
;               If <stf> is omitted then "shrink to fit" is disabled.
;     FontFaceColor - Sets the font face color.
;       FontFaceColor=<color>
;     FontBorderColor - Sets the font border color.
;       FontBorderColor=<color>
;     FontShadowColor - Sets the font shadow color.
;       FontShadowColor=<color>
;     FontBackColor - Sets the font background color.
;       FontBackColor=<color>
;     FontBorderSize - Sets the font border size.
;       FontBorderSize=<size>
;       <size> = Font border size. -1 means to use the font's standard size.
;     FontShadowSize - Sets the font shadow size.
;       FontShadowSize=<size>
;       <size> = Font shadow size. -1 means to use the font's standard size.
;     ImageSetup - Starts an image operation and defines the field size.
;       ImageSetup=<width>[,<height>[,<left>,<top>]]
;       <width> = Field width (number of cells).
;       <height> = Field height (number of cells). Default is 1.
;       <left> = Field left coordinate. Default is current position.
;       <top> = Field top coordinate. Default is current position.
;     ImageDraw - Ends an image operation and draws the image.
;       ImageDraw=<filename>
;       <filename> = Image file on the ResulTV computer.
;     ImageJustify - Sets the image justification.
;       ImageJustify=<hjustify>,<vjustify>
;       <hjustify> = Left, Center, or Right
;       <vjustify> = Top, Center, or Bottom
;     ImageMargins - Sets the margins within an image field.
;       ImageMargins=<left>,<right>,<top>,<bottom>
;       <left> = Left margin (number of pixels).
;       <right> = Right margin (number of pixels).
;       <top> = Top margin (number of pixels).
;       <bottom> = Bottom margin (number of pixels).
;     ImageStretch - Sets the image stretch mode (KA means Keep Aspect).
;       ImageStretch=<mode>
;       <mode> = Off, On, or OnKA
;     Blank - Skips over blank space. (To leave room for image, for instance.)
;       Blank=<width>[,<height>[,<left>,<top>]]
;       <width> = Field width (number of cells).
;       <height> = Field height (number of cells). Default is 1.
;       <left> = Field left coordinate. Default is current position.
;       <top> = Field top coordinate. Default is current position.
;
;  + LayoutSetup sets the following default values:
;     LayoutBackColor=Black
;     TextJustify=Left
;     TextMargins=2,2
;     TextHandling=Auto
;     TextOptimize=On
;     FontName=Arial
;     FontWidth=100
;     FontFaceColor=White
;     FontBorderColor=Black
;     FontShadowColor=Black
;     FontBackColor=Background
;     FontBorderSize=-1
;     FontShadowSize=-1
;     ImageJustify=Center,Center
;     ImageMargins=0,0,0,0
;     ImageStretch=OnKA
;
;  + Text and Font commands that appear outside of a TextSetup..TextDraw
;    block are "global" and will apply to all subsequent Text operations.
;    Text and Font commands that appear inside of a TextSetup..TextDraw
;    block are "local" and will apply only to the current Text operation.
;
;  + Image commands that appear outside of an ImageSetup..ImageDraw
;    block are "global" and will apply to all subsequent Image operations.
;    Image commands that appear inside of an ImageSetup..ImageDraw
;    block are "local" and will apply only to the current Image operation.